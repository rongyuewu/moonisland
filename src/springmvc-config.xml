<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.3.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">
	<!-- 配置数据源datasource -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	 	<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
	 	<property name="jdbcUrl" value="jdbc:mysql://qdm17561358.my3w.com:3306/qdm17561358_db"></property>
	 	<property name="user" value="qdm17561358"></property>
	 	<property name="password" value="sql15226508923"></property>
	 </bean>
	 <!-- sqlSessionFactory管理 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"></property>
	 	<!-- 找到mybatis配置文件 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	 </bean>
	 <!-- 声明式事务 -->
	 <!-- 1事务管理器 -->
		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		<!-- 2配置通知，就是要对哪些方法做事务 -->
		<tx:advice id="txAdivce" transaction-manager="txManager">
			<tx:attributes>
				<!-- 	REQUIRED（默认值）：在有transaction状态下执行；如当前没有transaction，则创建新的transaction；
						SUPPORTS：如当前有transaction，则在transaction状态下执行；如果当前没有transaction，在无transaction状态下执行；
						MANDATORY：必须在有transaction状态下执行，如果当前没有transaction，则抛出异常IllegalTransactionStateException；
						REQUIRES_NEW：创建新的transaction并执行；如果当前已有transaction，则将当前transaction挂起；
						NOT_SUPPORTED：在无transaction状态下执行；如果当前已有transaction，则将当前transaction挂起；
						NEVER：在无transaction状态下执行；如果当前已有transaction，则抛出异常IllegalTransactionStateException。 -->
				<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
				<!-- mybatis中需要加  rollback-for="java.lang.Exception"意思是异常后事务回滚，因为他默认提交事务，而hibnater中默认事务不会提交-->
				<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			</tx:attributes>
		</tx:advice>
		<!-- 3配置切面 -->
	 	<aop:config>
	 		<aop:advisor advice-ref="txAdivce" pointcut="execution(public * cn.com.yld.dao.impl.*.*(..))"/>
	 	</aop:config>
	 	
	 	<!-- dao -->
	 	<bean id="aboutDao" class="cn.com.yld.dao.impl.AboutDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="userDao" class="cn.com.yld.dao.impl.UserDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="brandDao" class="cn.com.yld.dao.impl.BrandDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="glassDao" class="cn.com.yld.dao.impl.GlassDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="cartDao" class="cn.com.yld.dao.impl.CartDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="goodsDao" class="cn.com.yld.dao.impl.GoodsDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="returnorderdao" class="cn.com.yld.dao.impl.ReturnorderDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="areadao" class="cn.com.yld.dao.impl.AreaDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="goodsCommentDao" class="cn.com.yld.dao.impl.GoodsCommentDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
		<bean id="orderDao" class="cn.com.yld.dao.impl.OrderDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="goodsPicDao" class="cn.com.yld.dao.impl.GoodsPicDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	<bean id="optometryDao" class="cn.com.yld.dao.impl.OptometryDaoImpl">
	 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 	</bean>
	 	
	 	<!-- 业务层 -->
	 	<bean id="aboutService" class="cn.com.yld.service.impl.AboutServiceImpl">
	 		<property name="dao" ref="aboutDao"></property>
	 	</bean>
	 	<bean id="userService" class="cn.com.yld.service.impl.UserServiceImpl">
	 		<property name="dao" ref="userDao"></property>
	 	</bean>
	 	<bean id="brandService" class="cn.com.yld.service.impl.BrandServiceImpl">
	 		<property name="dao" ref="brandDao"></property>
	 	</bean>
	 	<bean id="glassService" class="cn.com.yld.service.impl.GlassServiceImpl">
	 		<property name="dao" ref="glassDao"></property>
	 	</bean>
	 	<bean id="cartService" class="cn.com.yld.service.impl.CartServiceImpl">
	 		<property name="dao" ref="cartDao"></property>
	 	</bean>
	 	<bean id="returnorderService" class="cn.com.yld.service.impl.ReturnorderServiceImpl">
	 		<property name="dao" ref="returnorderdao"></property>
	 	</bean>
	 	<bean id="areaService" class="cn.com.yld.service.impl.AreaServiceImpl">
	 		<property name="dao" ref="areadao"></property>
	 	</bean>
	 	<bean id="orderService" class="cn.com.yld.service.impl.OrderServiceImpl">
	 		<property name="dao" ref="orderDao"></property>
	 	</bean>
	 	<!-- <bean id="goodsPicService" class="cn.com.yld.service.impl.GoodsPicServiceImpl">
	 		<property name="dao" ref="goodsPicDao"></property>
	 	</bean>
		<bean id="optometryService" class="cn.com.yld.service.impl.OptometryServiceImpl">
	 		<property name="dao" ref="optometryDao"></property>
	 	</bean> -->
	 	
	 	
	
	<!-- springMVC======================================================================================================================= -->					
	<!-- <bean name="/login" class="cn.com.action.UserAction"></bean> -->	
	<!-- 处理静态资源使用 ,虽然使用了spring框架的核心控制器，但是不做任何处理-->
	<!-- <mvc:default-servlet-handler/>
	指定使用注解需要扫描的包	
	<context:component-scan base-package="cn.com.yld.action"></context:component-scan>	
	spring4.0后使用以下方式驱动注解
	<mvc:annotation-driven></mvc:annotation-driven>	
	配置视图解析器，帮助设置短名称
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean> -->
</beans>
